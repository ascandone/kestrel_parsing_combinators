{"version":"0.0.1","modules":{"Parser":{"moduleName":"Parser","items":[{"type":"adt","name":"ParsingError","params":[],"variants":[{"name":"Expecting","args":["String"]}]},{"type":"adt","name":"Parser","params":["a"],"docComment":" Represents a parser that yields a value of type `a`\n"},{"type":"value","name":"run","signature":"Fn(Parser<a>, String) -> Result<a, ParsingError>","docComment":" Run the parser on the given string.\n"},{"type":"value","name":"of","signature":"Fn(a) -> Parser<a>","docComment":" A combinator that always succeeds with the given value\n"},{"type":"value","name":"fail","signature":"Fn(String) -> Parser<a>","docComment":" A combinator that always fails with the given reason\n"},{"type":"value","name":"try","signature":"Fn(Parser<a>) -> Parser<a>","docComment":" Avoid consuming the input if the parser fails. This is useful in combination with [`one_of`](#one_of)\n"},{"type":"value","name":"any","signature":"Parser<Char>","docComment":" A parser that consumes any char\n"},{"type":"value","name":"end","signature":"Parser<Unit>","docComment":" A parser that succeed on end of string\n"},{"type":"value","name":"and_then","signature":"Fn(Parser<a>, Fn(a) -> Parser<b>) -> Parser<b>","docComment":" Chains the result of a parser with a function that returns a new parser.\n Fails when one of the parsers fail\n \n If the first parse succeeds, the input is consumed even if the second parser fails\n"},{"type":"value","name":"map","signature":"Fn(Parser<a>, Fn(a) -> b) -> Parser<b>"},{"type":"value","name":"map_to","signature":"Fn(Parser<a>, b) -> Parser<b>"},{"type":"value","name":"one_of","signature":"Fn(List<Parser<a>>) -> Parser<a>"},{"type":"value","name":"lazy","signature":"Fn(Fn() -> Parser<a>) -> Parser<a>"},{"type":"value","name":"char","signature":"Fn(Char) -> Parser<Unit>","docComment":" Match an exact char\n"},{"type":"value","name":"satisfy","signature":"Fn(Fn(Char) -> Bool) -> Parser<Char>","docComment":" Only parse when predicate is true\n"},{"type":"value","name":"string","signature":"Fn(String) -> Parser<Unit>","docComment":" Match an exact string\n"},{"type":"value","name":"many","signature":"Fn(Parser<a>) -> Parser<List<a>>","docComment":" Runs the given parser _zero_ or more times, and return the list of parsed values\n"},{"type":"value","name":"many1","signature":"Fn(Parser<a>) -> Parser<(a, List<a>)>","docComment":" Runs the given parser _one_ or more times\n"},{"type":"value","name":"sep_by1","signature":"Fn(Parser<a>, Parser<b>) -> Parser<List<a>>","docComment":" List of _one_ or more values separated by given separator\n"},{"type":"value","name":"sep_by","signature":"Fn(Parser<a>, Parser<b>) -> Parser<List<a>>","docComment":" List of _zero_ or more values separated by given separator\n"},{"type":"value","name":"discard","signature":"Fn(Parser<a>) -> Parser<Unit>"}]},"ParserTests":{"moduleName":"ParserTests","items":[{"type":"value","name":"main","signature":"Task<Unit>"}]}}}